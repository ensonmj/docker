# Basic Options {{{
# -d, --dir=
# The directory to store the downloaded file
dir=${HOME}/Downloads/_dl

# -i, --input-file=
# Downloads the URIs listed in FILE
input-file=${HOME}/.aria2/session.dat

# -l, --log=
# The file name of the log file: '-' for stdout,
# If empty string("") is specified, or this option is ommitted, no log is written to disk at all
# log=${HOME}/.aria2/aria2.log
log=""

# -j, --max-concurrent-downloads=
# Set maximum number of parallel downloads for every queue item
max-concurrent-downloads=20

# -V, --check-integrity[=true|false(default)]
# Check file integrity by validating piece hashes or a hash of entire file,
# this option has effect only in BT, Metalink downloads with checksums
# or HTTP(S)/FTP # downloads with --checksum option
check-integrity=true

# -c, --continue[=true|false]
# Continue downloading a partially downloaded file,
# use this option to resume a download started by a web browser or another program
# which downloads files sequentially from the beginning,
# currently this option is only applicable to HTTP(S)/FTP downloads,
continue=true
# }}}

# HTTP(S)/FTP/SFTP Options {{{
# --all-proxy=, --http-proxy=, --https-proxy=, --ftp-proxy
# --all-proxy-user=, --all-proxy-passwd=
# [http://][user:passowrd@]host[:port]
# --no-proxy=<DOMAINS>
# --proxy-method=[get(default)|tunnel]
#all-proxy=http://127.0.0.1:8087

# --connect-timeout=60
# Set the connection timeout in seconds to establish connection to HTTP/FTP/proxy server
# After the connection is established, this option makes no effect
# and --timeout option is used instead
connect-timeout=120

# --lowest-speed-limit=0
# Close connection if download speed is lower than or equal to this value(bytes/sec)
# this option does not affect BT downloads
#lowest-speed-limit=10K

# -x, --max-connection-per-server=1
# The maximum number of connections to one server for each download
max-connection-per-server=16

# --max-file-not-found=0
# If aria2 receives "file not found" status from the remote HTTP/FTP server NUM times
# without getting a single byte, then force the download to fail.
max-file-not-found=2

# -m, --max-tries=5
# Set number of tries
max-tries=2

# -k, --min-split-size=20M
# aria2 does not split less than 2*SIZE byte range
min-split-size=10M

# -R, --remote-time[=true|false(default)]
# Retrieve timestamp of the remote file from the remote HTTP/FTP server,
# if it is avalible, apply it to the local file
#remote-time=true

# --retry-wait=0
# Set the seconds to wait between retries.
# when SEC > 0, aria2 will retry downloads when the HTTP server returns a 503 response

# -s, --split=5
# Download a file using N connections
split=10

# -t, --timeout=60
# Set timeout in seconds
timeout=120

# HTTP specific options
# --ca-certificate=
# --certificate=
# --check-certificate[=true(default)|false]
# Verify the peer using certificates specified in --ca-certificate option
check-certificate=false

# --referer=
# Set an http referrer(Referer),
# if '*' is given, the download URI is also used as the referrer,
# this may be useful when used together with the --parameterized-uri option
referer=http://pan.baidu.com/disk/home

# --header=
# Append HEADER to HTTP request header
# header="xx: yy"

# --load-cookies=<FILE>
# Load Cookies from FILE using the Firefox3 format(SQLite3), Chrome(SQLite3)
# and the Mozilla/Firefox(1.x/2.x)/Netscape format

# --save-cookies=<FILE>
# Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/Netscape format,
# session Cookies are also saved and their expiry values are treated as 0

# -U, --user-agent=aria2/$VERSION
# Set user agent for HTTP(S) downloads
user-agent=netdisk;5.2.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia
#user-agent=uTorrent/2210(25130)
#user-agent=Transmission/2.61 (13407)
#user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36

# FTP/SFTP specific options
# --ftp-user=, --ftp-passwd=
# --ftp-type=binary(default)|ascii
# }}}

# BitTorrent Options {{{
# --bt-detach-seed-only[=true|false(default)]
# Exculde seed only downloads when counting concurrent active downloads
# be aware thath seeding item is still recognized as active download in RPC mothod
bt-detach-seed-only=true

# --bt-enable-lpd[=true|false(default)]
# Enable local Peer Discovery
# if a private flag is set in a torrent, aria2 doesn't use this feature for that
# download even if true is given
bt-enable-lpd=true

# --bt-exclude-tracker=<URI>[,...]
# Comma separated list of BT tracker's announce URI to remove
# "*" matches all URIs, thus remove all announce URIs

# --bt-external-ip=<IPADDRESS>
# Specify the external IP address to use in BT download and DHT, it may be sent to BT tracker
# For DHT, this option should be set to report that local node is downloading a
# particular torrent, this is critical to use DHT in a private network
#bt-external-ip=

# --bt-force-encryption[=true|false(default)]
# Requires BT message payload encryption with arc4
# this is a shorthand of '--bt-requeri-crypto --bt-min-crypto-level=arc4'
bt-force-encryption=false

# --bt-load-saved-metadata[=true|false(default)]
# Before getting torrent metadata from DHT when downloading with megnet link,
# first try to read file saved by --bt-save-metadata option. If it is successful,
# then skip downloading metadata from DHT
bt-load-saved-metadata=true

# --bt-lpd-interface=
# Use given interface for Local Peer Discovery, if this option is not specified,
# the default interface is chosen, you can specify interface name and IP address
# Possible value: interface, IP address

# --bt-max-peers=55
# Specify the maximum number of peers per torrent
bt-max-peers=100

# --bt-prioritize-piece=head[=1M],tail[=1M]
# Try to download first and last pieces of each file first,
# this is useful for previewing files
bt-prioritize-piece=head,tail

# --bt-require-crypto[=true|false(default)]
# If ture is given, aria2 doesn't accept and establish connection with legacy
# BT handshake(19BitTorrent protocol), thus aria2 always uses Obfuscation handshake
bt-require-crypto=false

# --bt-request-peer-speed-limit=50K
# If the whole download speed of every torrent is lower than SPEED,
# aria2 temporarily increases the number of peers to try for more download speed
bt-request-peer-speed-limit=100K

# --bt-save-metadata[=true|false(default)]
# Save meta data as ".torrent" file, this option has effect only when BT Magnet URI is used
bt-save-metadata=true

# -bt-seed-unverified[=true|false(default)]
# Seed previously downloaded files without verifying piece hashes
bt-seed-unverified=false

# --bt-tracker=<URI>[,...]
# Comma separated list of additional BT tracker's annouce URI,
# these URIs are not affected by --bt-exclude-tracker option
bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.pirateparty.gr:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://9.rarbg.com:2710/announce,http://asnet.pw:2710/announce,udp://public.popcorn-tracker.org:6969/announce,udp://tracker.opentrackr.org:1337/announce,http://tracker.opentrackr.org:1337/announce,udp://tracker.internetwarriors.net:1337/announce,udp://tracker1.wasabii.com.tw:6969/announce,udp://tracker.zer0day.to:1337/announce,udp://peerfect.org:6969/announce,udp://open.facedatabg.net:6969/announce,udp://mgtracker.org:6969/announce,udp://ipv4.tracker.harry.lu:80/announce,http://mgtracker.org:6969/announce,http://ipv4.tracker.harry.lu:80/announce,udp://tracker.mg64.net:6969/announce,http://tracker.mg64.net:6881/announce,http://tracker.electro-torrent.pl:80/announce

# --bt-tracker-connect-timeout=60
# Set the connect timeout in seconds to establish connection to tracker,
# after the connection is established, this option makes no effect and
# --bt-tracker-timeout option is used instead
bt-tracker-connect-timeout=120

# --bt-tracker-interval=0
# Set the interval in seconds between tracker requests.
# this completely overrides interval value and aria2 ignores the min interval and
# interval value in the response of tracker
# if 0 is set, aria2 determines interval based on the response of tracker and download progress
bt-tracker-interval=300

# --bt-tracker-timeout=60
# Set timeout in seconds
bt-tracker-timeout=120

# --dht-entry-point=<HOST>:<PORT>
# Set host and port as an entry point to IPv4 DHT network
dht-entry-point=router.bittorrent.com:6881
#dht-entry-point=router.utorrent.com:6881
#dht-entry-point=router.bitcomet.net:554
#dht-entry-point=dht.aelitis.com:6881
#dht-entry-point=dht.transmissionbt.com:6881
# dht-entry-point6=<HOST>:<PORT>

# --dht-file-path=
# Change the IPv4 DHT routing table file to PATH
# Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat
dht-file-path=${HOME}/.aria2/dht.dat
#dht-file-path6=${HOME}/.aria2/dht6.dat

# --dht-listen-port=6881-6999
# Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker
# multiple ports can be specified by using ',', e.g. '6881,6885'
# you can also use '-' to specify a range, e.g. '6881-6999'
# make sure that the specified ports are open for incoming UDP traffic
dht-listen-port=16969

# --enable-dht[=true(default)|false]
# Enable IPv4 DHT, it also enables UDP tracker support,
# if a private flag is set in a torrent, aria2 doesn't use DHT for that download
# even if true is given
enable-dht=true
#enable-dht6=true

# --enable-peer-exchange[=ture(default)|flase]
# Enable Peer Exchange extension
# if a private flag is set in a torrent, this feature is disabled for that download
# even if ture is given
enable-peer-exchange=true

# --follow-torrent=true(default)|false|mem
# If true or mem is specified, when a file whose suffix is .torrent
# or content type is application/x-bittorrent is downloaded,
# aria2 parses it as torrent file and downloads files mentioned in it.
# if mem is specified, a torrent file is not written to the disk, but is just
# kept in memory
follow-torrent=true

# --listen-port=6881-6999
# Set TCP port number for BT downloads
# make sure that the specified ports are open for incoming TCP traffic
listen-port=16969

# --max-overall-upload-limit=0
# Set max overall upload speed in bytes/sec
max-overall-upload-limit=100K

# --max-upload-limit=0
# Set max upload speed per each torrent in bytes/sec
max-upload-limit=50K

# --peer-id-prefix=A2-#MAJOR-$MINOR-$PATCH-
# Specify the prefix of peer ID
#peer-id-prefix=-TR2610-
peer-id-prefix=-UT2210-

# --seed-ratio=1.0
# Specify share ratio
# seed-ratio=0.1

# --seed-time=
# Specify seeding time in minutes
seed-time=0
# }}}

# Metalink specific options {{{
# --follow-metalink=true(default)|false|mem
# If true or mem is specified, when a file whose suffix is .meta4 or .metalink
# or content type of application/metalink4+xml or application/metalink+xml
# is downloaded, aria2 parses it as a metalink file and downloads files
# mentioned in it.
# If mem is specified, a metalink file is not written to the disk,
# but is just kept in memory
follow-metalink=true

#--metalink-location=
# The location of the preferred server,
# a comma-delimited list of locations is acceptable, e.g. "jp,us"
#metalink-location=cn,jp,us
# }}}

# RPC Options {{{
# --enable-rpc[=true|false(default)]
# Enable JSON-RPC/XML-RPC server
# It is strongly recommended to set secret authorization token using --rpc-secret option
enable-rpc=true

# --rpc-allow-origin-all[=ture|false(default)]
# Add Access-Control-Allow-Origin header field with value '*' to the RPC response
rpc-allow-origin-all=true

# --rpc-listen-all[=true|false(default)]
# Listen incoming JSON-RPC/XML-RPC requests on all network interfaces
rpc-listen-all=true

# --rpc-listen-port=6800
# Specify a port number for JSON-RPC/XML-RPC server to listen to
rpc-listen-port=6800

# --rpc-max-request-size=2M
# Set max size of JSON-RPC/XML-RPC request
# if aria2 detects the request is more than SIZE bytes, it drops connection

# --rpc-save-upload-metadata[=true(default)|false]
# Save th uploaded torrent or metalink meta data in the directory specified by --dir option
rpc-save-upload-metadata=true

# --rpc-secret=
# Set RPC secret authorization token
#rpc-secret=aria2c
# }}}

# Advanced Options {{{
# --allow-overwrite[=true|false(default)]
# Restart download from scratch if the corresponding control file doesn't exist
allow-overwrite=true

# --always-resume[=true(default)|false]
# Always resume download
always-resume=true

# --async-dns[=true(default)|false]
# --async-dns-server=<IPADDRESS>[,...]
async-dns=true
async-dns-server=223.5.5.5,8.8.8.8,114.114.114.114

# --auto-save-interval=60
# Save a control file(*.aria2) every SEC seconds
# if 0 is given, a control file is not saved during download
# aria2 saves a control file when it stops regardless of the value
auto-save-interval=60

# -D, --daemon[=true|false(default)]
# Run as daemon
#daemon=true

# --disable-ipv6[=true|false]
# Disable IPv6,
# this is useful if you have to use broken DNS and want to
# avoid terribly slow AAAA record lookup
disable-ipv6=true

# --disk-cache=16M
# Enable disk cache
# if SIZE is 0, the disk cache is disabled
disk-cache=64M

# --enable-mmap[=true|false(default)]
# Map files into memory
# this option may not work if the file space is not pre-allocated
enable-mmap=false

# --file-allocation=none|prealloc(default)|trunc|falloc
# Specify file alloction method: none, prealloc(default), trunc;
file-allocation=prealloc

# --force-save[=ture|false(default)]
# Save download with --save-session option even if the download is
# completed or removed
# this option also save control file in that situations.
force-save=true

# --log-level=debug(default)|info|notice|warn|error
# Set log level to output
log-level=warn

# --on-bt-download-complete=<COMMAND>
# -on-download-complete=<COMMAND>
# -on-download-error=<COMMAND>
# -on-download-pause=<COMMAND>
# -on-download-start=<COMMAND>
# -on-download-stop=<COMMAND>
on-download-complete=/root/on-complete.sh

# --summary-interval=60s
# Set interval in seconds to output download progress summary.
# Setting 0 suppressed the output
#summary-interval=60

# -Z, --force-sequential[=true|false(default)]
# Fetch URIs in the command-line sequentially and download each URI in a separate session
force-sequential=true

# --max-overall-download-limit=0
# Set max overall download speed in bytes/sec
max-overall-download-limit=0

# --max-download-limit=0
# Set max download speed per each download in bytes/sec
max-download-limit=0

# -P, --parameterized-urk[=true|false(default)]
# Enable parameterized URI support
#   http://{srv1, srv2, srv3}/foo.iso
#   http://host/image[000-100:2].img
parameterized-uri=true

# --save-session
# Save error/unfinished downloads to FILE on exit
save-session=${HOME}/.aria2/session.dat

# --save-session-inverval=0
# Save error/unfinished downlads to a file every SEC seconds
# if 0 is given, file will be saved only when aria2 exits
save-session-interval=60

# --socket-recv-buffer-size=
# Set the maximum socket receive buffer in bytes
# Specifying 0 will disable this option
# Use `netstat -su` to detected number of receive buffer errors
#socket-recv-buffer-size=2097152
# }}}

# vim: foldmethod=marker
